// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;

public class GravitySprite : MonoBehaviour
{
    bool isJumping = true; 
    Animator anim;
    Rigidbody2D rb;
    public float runVel = 1.41f;
    GameObject currentPlatform; // The platform that the sprite is currently on.
    public bool isFacingRight = true;		
    public bool onVine = false;
    public float vineLength = 0;
    float gravConst;

    public void Start ()
    {
        anim = GetComponent<Animator> ();
        rb = GetComponent<Rigidbody2D> ();
        currentPlatform = null;
        gravConst = rb.gravityScale;
    }

    public void FixedUpdate()
    {
        //anim.SetFloat ("Speed", Mathf.Abs( rb.velocity.x));
        if (onVine && !InputManager.wantToRun)
        {
            rb.velocity = new Vector3(0, rb.velocity.y);
        }
    }

    public void land(GameObject platform)
    {
        if (anim.GetCurrentAnimatorStateInfo (0).IsName ("idle"))
            return;
        isJumping = false;
        anim.SetTrigger ("Land");
        anim.SetBool ("Jump", false);
        currentPlatform = platform;
    }

    public void jump()
    {
        if (isJumping) {
            return;
        }

        if (anim.GetCurrentAnimatorStateInfo (0).IsName ("jumping")) {
            return;
        }

        rb.AddForce(new Vector2(0,200));
        isJumping = true;
        anim.SetTrigger("Jump");

        anim.SetBool ("Land", false);

        currentPlatform = null;
    }

    public void run(Vector2 dir)
    {
        Vector2 vel = rb.velocity;
        vel.x = dir.x * runVel;
        rb.velocity = vel;
    }

    public GameObject getCurrentPlatform()
    {
        return currentPlatform;
    }

    public void climbVine()
    {
        transform.position += new Vector3(0, vineLength);
    }

    public void OnVine(float vineLength)
    {
        this.vineLength = vineLength;
        rb.gravityScale = 0;
        onVine = true;
    }
    public void offVine()
    {
        this.vineLength = 0;
        onVine = false;
        rb.gravityScale = gravConst;
    }
}
